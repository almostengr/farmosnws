<?php

/**
 * @file
 * Code for the FarmOS NWS module
 */

/**
 * Implements hook_menu()
 * 
 * @return Array of menu links
 */
function farmosnws_menu() {
  $items = array();
  
  $items['admin/config/farm/farmosnws'] = array(
    'title' => t('FarmOS NWS'),
    'description' => t('Configure data feeds to be pulled by FarmOS NWS.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farmosnws_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'farmosnws.admin.inc',
  );

  $items['admin/config/farm/farmosnws/force'] = array(
    'title' => t('Force Feed Pull'),
    'desecription' => t('Bypass cron feed pull and pull latest feed from NWS.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('farmosnws_admin_force_feed_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'farmosnws.admin.inc',
  );
   
  return $items;
}

/**
 * Implements hook_cron()
 */
function farmosnws_cron() {
  // get the last cron time.
  $last_cron = variable_get('farmosnws_cron_last', 0);
  $next_cron = $last_cron + 3600 - 30;
  
  // if it is time to pull the next feed, then pull it.
  if (REQUEST_TIME >= $next_cron) {
    farmosnws_get_xml();
  }
  else {
    watchdog('farmosnws', 'Cron ran. Skipping feed pull.', array(), WATCHDOG_INFO, NULL);
  }
}

/**
 * Check and create if necessary the path where the weather feeds will be stored.
 * 
 * @param string feedpath
 *   String to the path that contains the feeds 
 *   
 * @return Returns whether the directory exists or not.
 */
function farmosnws_create_feed_dir($feedpath) {
  $mkdirsuccess = NULL;
  
  // check to see if the feeds directory exists. If not attempt to create it.
  if (is_dir($feedpath) == FALSE) {
    $mkdirsuccess = mkdir($feedpath, 755);
    
    // verify directory exists
    if ($feedpath == FALSE) {
      farmosnws_display_error("Unable to create weather feed directory");
      $mkdirsuccess = FALSE;
    }
    else {
      watchdog('farmosnws', 'Created weather feed directory.', array(), WATCHDOG_INFO, NULL);
    } // end if
  }
  else {
    // skipping actions
    $mkdirsuccess = TRUE;
  } // end if
  
  return $mkdirsuccess;
}

/**
 * Displays an error message on the page and in the log.
 *
 * @param string $errmessage The error message to be displayed on the screen 
 *   and written to the log/watchdog.
 */
function farmosnws_display_error($errmessage) {
  drupal_set_message(t($errmessage), 'error', FALSE);
  watchdog('farmosnws', t($errmessage), array(), WATCHDOG_ERROR, NULL);
}

/**
 * Displays a warning message on the page and in the log.
 *
 * @param string $warnmessage The warning message to be displayed on the 
 * screen and written to the log/watchdog.
 */
function farmosnws_display_warning($warnmessage) {
  drupal_set_message(t($warnmessage), 'warning', FALSE);
  watchdog('farmosnws', t($warnmessage), array(), WATCHDOG_WARNING, NULL);
}

function farmosnws_display_status($statusmessage) {
  drupal_set_message(t($statusmessage), 'warning', FALSE);
  watchdog('farmosnws', t($statusmessage), array(), WATCHDOG_INFO, NULL);
}

function farmosnws_log_error($errmessage) {
  watchdog('farmosnws', t($errmessage), array(), WATCHDOG_ERROR, NULL);
}

function farmosnws_log_warning($warnmessage) {
  watchdog('farmosnws', t($warnmessage), array(), WATCHDOG_WARNING, NULL);
}

function farmosnws_log_status($statusmessage) {
  watchdog('farmosnws', t($statusmessage), array(), WATCHDOG_INFO, NULL);
}

/**
 * Get the weather data from the NWS
 *
 * @TODO add converter for schema to actual path
 */
function farmosnws_get_xml() {
  $weatherfeedsdir = variable_get('farmosnws_weather_feeds_dir');
  
  $locations = variable_get('farmosnws_locations', '');
  $location_array = explode(",", $locations);
  
  foreach ($location_array as $loc) {
    // remove carriage returns and new lines
    $loc = str_replace(" ", "", str_replace("\r", "", str_replace("\n", "", $loc)));

    // build URL to connect to NWS
    $weather_feed_name = $weatherfeedsdir . '/' . uniqid($loc, FALSE) . '.xml';
    $url = "http://w1.weather.gov/xml/current_obs/" . $loc . ".xml";
 
    watchdog('farmosnws', $url, array(), WATCHDOG_DEBUG, NULL);
    watchdog('farmosnws', 'Getting weather data for ' . $loc, array(), WATCHDOG_INFO, NULL);
  
    // pull the data   
    $response = drupal_http_request($url, array());
    
    // if error occurs when performing the request
    if (isset($response->error)) {
      farmosnws_display_error($response->error);
    }
    else {
      // if no errors occur when performing the request
      watchdog('farmosnws', 'Response code: ' . $response->code, array(), WATCHDOG_INFO, NULL);

      // if the directory doesnt exist, then create it with 755 permissions
      $direxist = farmosnws_create_feed_dir($weatherfeedsdir);
      
      if ($direxist == TRUE) {
        // save the contents retrieved
        file_put_contents($weather_feed_name, $response->data);
        watchdog('farmosnws', 'Weather data saved to ' . $weather_feed_name, array(), WATCHDOG_INFO, NULL);
        
        farmosnws_convert_xml_2_csv($weather_feed_name);
        
        // update the last feed pull time
        variable_set("farmosnws_cron_last", REQUEST_TIME);
      }
      else {
        farmosnws_display_error("Feed could not be downloaded because the directory does not exist. Please verify that Drupal has write access and try again.");
      }
    } // end else
  } // end foreach
} // end function

/**
 * Check the cron frequency. If not set to 1 hour, then warn of the impact.
 */
function farmosnws_check_cron_time() {
  $crontime = variable_get('cron_safe_threshold', 0);

  if ($crontime != "3600") {
    farmosnws_display_warning("Cron is not set to 1 hour. It is recommended that cron runs hourly to load new nWS data feeds as they are published.");
  }
}

/**
 * Check that the units of measurement have been set in the FarmOS configuration.
 * If the value has not been set then display a warning.
 */
function farmosnws_check_farmos_measurements() {
  $units = variable_get('farm_quantity_unit_system', 0);

  if ($units == "0") {
    farmosnws_display_warning("Units of measurement is not set. Set this value in the " . l("Farm OS configuration.", "admin/config/farm/quantity"));
  }
}

/**
 * Convert the xml file to csv file.
 *
 * @TODO Default to metric units if value is not set.
 *
 * @param string $feedfilename 
 *  string File name that will be split into smaller feeds
 */
function farmosnws_convert_xml_2_csv($feedfilename) {
  // read the files in the unprocessed directory
  $csvfilename = $feedfilename . '.csv';
  $notes = "";
  
  try {
    $csvfile = fopen($csvfilename, "w");
 
    // throw exception if file cannot be opened   
    if ($csvfile === FALSE) {
      throw new Exception("Could not open CSV file for writing");
    }
 
    // write header
    fputcsv($csvfile, array("Done", "Date", "Name", "Notes", "Value", "Unit"));
    
    // load the xml file
    $xml = simplexml_load_file($feedfilename);

    // load the units configuration
    $measure_units = variable_get('farm_quantity_unit_system', 'metric');
  
    // log the metric units
    if ($measure_units == 'metric') {
      if (variable_get('farmosnws_log_temperature', 1) == 1) {
        // temperature in C
        fputcsv($csvfile, array(1, $xml->observation_time_rfc822, $xml->location . ' Temperature', $notes, $xml->temp_c, "Celsius"));
      }
      
      if (variable_get('farmosnws_log_pressure', 1) == 1) {
        // log the barametric pressure
        fputcsv($csvfile, array(1, $xml->observation_time_rfc822, $xml->location . ' Barometric Pressure', $notes, $xml->pressure_mb, "Millibars"));
      }

      if (variable_get('farmosnws_log_windspeed', 1) == 1) {
        // log wind speed in kph
        $kph_speed = $xml->wind_mph * 1.60934;
        fputcsv($csvfile, array(1, $xml->observation_time_rfc822, $xml->location . ' Wind Speed', $notes, $kph_speed, "KPH"));
      }

      if (variable_get('farmosnws_log_visibility', 1) == 1) {
        // log the visibility in KM
        $kms = $xml->visibility_mi * 1.60934;
        fputcsv($csvfile, array(1, $xml->observation_time_rfc822, $xml->location . ' Visibility', $notes, $kms, "Kilometers"));
      }
    } // end if metric units
    
    // log the US, standard units
    if ($measure_units == 'us') {
      if (variable_get('farmosnws_log_temperature', 1) == 1) {
        // temperature in F
        fputcsv($csvfile, array(1, $xml->observation_time_rfc822, $xml->location . ' Temperature', $notes, $xml->temp_f, "Fahrenheit"));
      }

      if (variable_get('farmosnws_log_pressure', 1) == 1) {
        // log the barametric pressure
        fputcsv($csvfile, array(1, $xml->observation_time_rfc822, $xml->location . ' Barometric Pressure', $notes, $xml->pressure_in, "Inches"));
      }
    
      if (variable_get('farmosnws_log_windspeed', 1) == 1) {
        // log the wind speed
        fputcsv($csvfile, array("1", $xml->observation_time_rfc822, $xml->location . ' Wind Speed', $notes, $xml->wind_mph, "MPH"));
      }

      if (variable_get('farmosnws_log_visibility', 1) == 1) {
        // log the visibility
        fputcsv($csvfile, array("1", $xml->observation_time_rfc822, $xml->location . ' Visibility', $notes, $xml->visibility_mi, "Miles"));
      }
    } // end if US units
   
    if (variable_get('farmosnws_log_humidity', 1) == 1) {
      // log the relative humidity
      fputcsv($csvfile, array("1", $xml->observation_time_rfc822, $xml->location . ' Humidity', $notes, $xml->relative_humidity, "Percent"));
    }

    if (variable_get('farmosnws_log_winddirection', 1) == 1) {
      // log the wind direction
      fputcsv($csvfile, array("1", $xml->observation_time_rfc822, $xml->location . ' Wind Direction', $xml->wind_dir, $xml->wind_degrees, "Degrees"));
    }
   
    if (variable_get('farmosnws_log_weather', 1) == 1) {
      // log the weather string
      fputcsv($csvfile, array("1", $xml->observation_time_rfc822, $xml->location . ' Weather', $xml->weather, "", ""));
    }
  
    // close the file
    fclose($csvfile);
    
    // remove feed file
    if (variable_get('farmosnws_delete_xml', "no") == "yes") {
      $removefeed = unlink($feedfilename);
      if ($removefeed == FALSE) {
        throw new Exception("Unable to remove XML feed file " . $feedfilename);
      }
    }
  }
  catch(Exception $e) {
    // handle the exception
    farmosnws_display_error($e->getMessage());
  }
}

